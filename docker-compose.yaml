version: '3.8'

services:
  # 1. Base de Datos (PostgreSQL)
  db:
    image: postgres:15-alpine
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/StockMonitor.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stockmonitor-net

  # 2. Sistema de Mensajería (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - stockmonitor-net

  # 3. Backend (Java/Spring Boot)
  backend:
    build:
      context: ./backend
    container_name: stockmonitor-backend
    restart: unless-stopped
    ports:
      - "8080:${PORT}" # Mapea el puerto del host al puerto de la variable
    environment:
      # Puerto del servidor
      - PORT=${PORT}

      # URL del Frontend para CORS
      - FRONTEND_URL=${FRONTEND_URL}

      # Conexión a la Base de Datos
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      
      # Conexión a RabbitMQ
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest

      # API Externa (Finnhub)
      - FINNHUB_API_KEY=${FINNHUB_API_KEY} 
      - FINNHUB_API_URL=https://finnhub.io/api/v1/quote
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - stockmonitor-net

  # 4. Frontend (React)
  frontend:
    build:
      context: ./frontend
    container_name: stockmonitor-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - stockmonitor-net

networks:
  stockmonitor-net:
    driver: bridge

volumes:
  postgres-data:
